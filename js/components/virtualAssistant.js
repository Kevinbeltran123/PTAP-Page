/**
 * Virtual Assistant - PTAP La Pola Educational Assistant
 * Hybrid intelligent assistant for water treatment plant queries
 * Author: Kevin Beltr√°n
 */

class VirtualAssistant {
    constructor() {
        this.isOpen = false;
        this.isTyping = false;
        this.conversationHistory = [];
        this.currentContext = null;
        this.glossaryMode = false;
        
        // Knowledge base with PTAP La Pola data
        this.knowledgeBase = {
            processes: {
                captacion: {
                    name: "Captaci√≥n",
                    description: "Sistema de captaci√≥n desde m√∫ltiples fuentes h√≠dricas",
                    sources: ["R√≠o Combeima (1,500 L/s)", "Q. Cay (600 L/s)", "Q. Chembe (70 L/s)"],
                    capacity: "2,170 L/s total",
                    keywords: ["captacion", "fuentes", "combeima", "cay", "chembe", "bocatoma"]
                },
                desarenador: {
                    name: "Desarenaci√≥n",
                    description: "Remoci√≥n de s√≥lidos gruesos y material de arrastre",
                    efficiency: ">85% s√≥lidos >0.2 mm",
                    retention: "2-5 minutos",
                    keywords: ["desarenador", "arenas", "solidos", "pretratamiento"]
                },
                coagulacion: {
                    name: "Coagulaci√≥n-Floculaci√≥n",
                    description: "Desestabilizaci√≥n y aglomeraci√≥n de part√≠culas coloidales",
                    chemical: "Sulfato de Aluminio (15-40 mg/L)",
                    time: "15-20 minutos",
                    keywords: ["coagulacion", "floculacion", "sulfato", "aluminio", "quimicos"]
                },
                sedimentacion: {
                    name: "Sedimentaci√≥n",
                    description: "Tecnolog√≠a de paneles tipo colmena",
                    technology: "Paneles tipo colmena",
                    investment: "$1,385 millones (2023)",
                    efficiency: ">90% s√≥lidos suspendidos",
                    keywords: ["sedimentacion", "colmena", "paneles", "clarificacion"]
                },
                filtracion: {
                    name: "Filtraci√≥n",
                    description: "Sistema multicapa con antracita, arena y grava",
                    layers: ["Antracita (60 cm)", "Arena (40 cm)", "Grava (40 cm)"],
                    investment: "$734 millones",
                    keywords: ["filtracion", "antracita", "arena", "grava", "multimedia"]
                },
                desinfeccion: {
                    name: "Desinfecci√≥n",
                    description: "Barrera final contra contaminaci√≥n microbiol√≥gica",
                    chemical: "Cloro gaseoso (0.8-2.0 mg/L)",
                    contact_time: "30 minutos m√≠nimo",
                    keywords: ["desinfeccion", "cloro", "microbiologico", "patogenos"]
                },
                almacenamiento: {
                    name: "Almacenamiento",
                    description: "Sistema de tanques de compensaci√≥n",
                    capacity: "31,400 m¬≥ total",
                    tanks: 13,
                    keywords: ["almacenamiento", "tanques", "reserva", "compensacion"]
                },
                distribucion: {
                    name: "Distribuci√≥n",
                    description: "10 distritos hidr√°ulicos",
                    districts: 10,
                    subscribers: "179,547 suscriptores",
                    coverage: "85% poblaci√≥n ibaguere√±a",
                    keywords: ["distribucion", "distritos", "suscriptores", "cobertura"]
                }
            },
            
            tanks: [
                {id: 1, name: "Tanque de Bel√©n", capacity: 3000, location: "Calle 2¬™ con Carrera 3¬™"},
                {id: 2, name: "Tanque Ciudad", capacity: 3000, location: "Calle 2¬™ con Carrera 3¬™"},
                {id: 3, name: "Tanque de Bel√©n - La Aurora", capacity: 1500, location: "Altos Barrio Augusto E. Medina"},
                {id: 4, name: "Tanque de Cerrogordo", capacity: 2000, location: "Cerrogordo (Barrio Cerrogordo)"},
                {id: 5, name: "Tanque de La 15", capacity: 4000, location: "Calle 15 Carrera 6¬™ y 7¬™"},
                {id: 6, name: "Tanque de Interlaken", capacity: 500, location: "Carrera 7¬™ A Calle 16"},
                {id: 7, name: "Tanque de La 29", capacity: 4000, location: "Calle 29 Carrera 4D"},
                {id: 8, name: "Tanque de La 30", capacity: 2000, location: "Calle 30 Carrera 4D"},
                {id: 9, name: "Tanque de Piedrapintada", capacity: 5000, location: "Carrera 5¬™ Calle 47"},
                {id: 10, name: "Tanque La Alsacia (El Salado)", capacity: 1000, location: "Hacienda La Alsacia sector de El Salado"},
                {id: 11, name: "Tanque Mirolindo", capacity: 1000, location: "V√≠a Ibagu√© - Bogot√° calzada izquierda sector de Mirolindo"},
                {id: 12, name: "Tanque Picale√±a", capacity: 1400, location: "V√≠a Ibagu√© - Bogot√° calzada izquierda sector de Club Campestre"},
                {id: 13, name: "Tanque de Ambal√°", capacity: 10000, location: "Sector Hacienda El Vergel"}
            ],
            
            districts: [
                {code: "DH1", subscribers: 10565, name: "Centro - Bel√©n"},
                {code: "DH2", subscribers: 7882, name: "Anc√≥n - Malabar"},
                {code: "DH3", subscribers: 11948, name: "Norte - Calambeo"},
                {code: "DH4", subscribers: 10422, name: "Occidente - San Sim√≥n"},
                {code: "DH5", subscribers: 20502, name: "Comfenalco - Santa Rita"},
                {code: "DH6", subscribers: 46866, name: "Principal - Jord√°n"},
                {code: "DH7", subscribers: 24305, name: "Montecarlo - El Vergel"},
                {code: "DH8", subscribers: 18359, name: "Los Tunjos - Comuna 8"},
                {code: "DH9", subscribers: 6795, name: "Picale√±a - Sur"},
                {code: "DH10", subscribers: 21903, name: "Ciudadela Sim√≥n Bol√≠var"}
            ],
            
            // Predefined responses for common questions
            responses: {
                greeting: [
                    "¬°Hola! Soy el asistente virtual de PTAP La Pola. ¬øEn qu√© puedo ayudarte hoy?",
                    "¬°Bienvenido! Estoy aqu√≠ para responder tus preguntas sobre el tratamiento de agua en IBAL.",
                    "¬°Hola! Soy tu gu√≠a para conocer todo sobre la Planta de Tratamiento La Pola."
                ],
                help: [
                    "Puedo ayudarte con:\n‚Ä¢ Informaci√≥n sobre procesos de tratamiento\n‚Ä¢ Datos de tanques y capacidades\n‚Ä¢ Estad√≠sticas de distritos hidr√°ulicos\n‚Ä¢ üìö Glosario t√©cnico especializado\n‚Ä¢ Explicaciones t√©cnicas\n‚Ä¢ Navegaci√≥n por la aplicaci√≥n\n\nüí° Tip: Escribe '/glosario' para explorar t√©rminos t√©cnicos",
                    "Preg√∫ntame sobre cualquier proceso de la PTAP, capacidades de tanques, distritos hidr√°ulicos o t√©rminos t√©cnicos espec√≠ficos.\n\nüìñ ¬øSab√≠as que tengo un glosario t√©cnico completo? Prueba escribiendo '/glosario [t√©rmino]'"
                ],
                unknown: [
                    "No estoy seguro de esa informaci√≥n espec√≠fica. ¬øPodr√≠as reformular tu pregunta?\n\nüí° Tip: Si es un t√©rmino t√©cnico, prueba '/glosario [t√©rmino]'",
                    "Hmm, no tengo esa informaci√≥n exacta. Prueba preguntando sobre procesos, tanques, distritos hidr√°ulicos o consultando el glosario t√©cnico.",
                    "No encontr√© informaci√≥n sobre eso. ¬øTe interesa saber sobre alg√∫n proceso espec√≠fico de tratamiento o consultar alg√∫n t√©rmino t√©cnico?"
                ]
            }
        };
        
        this.init();
    }
    
    init() {
        this.createAssistantUI();
        this.attachEventListeners();
    }
    
    createAssistantUI() {
        // Create floating assistant button
        const assistantButton = document.createElement('button');
        assistantButton.id = 'assistantButton';
        assistantButton.className = 'assistant-button';
        assistantButton.innerHTML = 'ü§ñ';
        assistantButton.title = 'Asistente Virtual PTAP';
        
        // Create chat window
        const chatWindow = document.createElement('div');
        chatWindow.id = 'assistantChat';
        chatWindow.className = 'assistant-chat';
        chatWindow.innerHTML = `
            <div class="chat-header">
                <div class="assistant-info">
                    <div class="assistant-avatar">ü§ñ</div>
                    <div class="assistant-details">
                        <h4>Asistente PTAP La Pola</h4>
                        <span class="status">En l√≠nea</span>
                    </div>
                </div>
                <button class="chat-close" id="chatClose">√ó</button>
            </div>
            <div class="chat-messages" id="chatMessages">
                <div class="message assistant-message">
                    <div class="message-content">
                        ¬°Hola! Soy el asistente virtual de PTAP La Pola. ¬øEn qu√© puedo ayudarte hoy?
                    </div>
                    <div class="message-time">${this.getCurrentTime()}</div>
                </div>
            </div>
            <div class="chat-input-container">
                <div class="quick-actions">
                    <button class="quick-btn" data-query="¬øC√≥mo funciona la coagulaci√≥n?">Coagulaci√≥n</button>
                    <button class="quick-btn" data-query="Mu√©strame los tanques">Tanques</button>
                    <button class="quick-btn" data-query="/glosario">üìö Glosario</button>
                    <button class="quick-btn" data-query="¬øCu√°ntos distritos hay?">Distritos</button>
                </div>
                <div class="input-area">
                    <input type="text" id="chatInput" placeholder="Escribe tu pregunta aqu√≠..." maxlength="200">
                    <button id="sendMessage" class="send-btn">üì®</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(assistantButton);
        document.body.appendChild(chatWindow);
    }
    
    attachEventListeners() {
        // Toggle chat window
        document.getElementById('assistantButton').addEventListener('click', () => {
            this.toggleChat();
        });
        
        // Close chat
        document.getElementById('chatClose').addEventListener('click', () => {
            this.closeChat();
        });
        
        // Send message
        document.getElementById('sendMessage').addEventListener('click', () => {
            this.sendMessage();
        });
        
        // Enter key to send
        document.getElementById('chatInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
        
        // Quick action buttons
        document.querySelectorAll('.quick-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const query = e.target.dataset.query;
                this.processQuery(query);
                document.getElementById('chatInput').value = '';
            });
        });
    }
    
    toggleChat() {
        const chatWindow = document.getElementById('assistantChat');
        this.isOpen = !this.isOpen;
        
        if (this.isOpen) {
            chatWindow.style.display = 'flex';
            setTimeout(() => {
                chatWindow.classList.add('open');
                document.getElementById('chatInput').focus();
            }, 10);
        } else {
            this.closeChat();
        }
    }
    
    closeChat() {
        const chatWindow = document.getElementById('assistantChat');
        chatWindow.classList.remove('open');
        setTimeout(() => {
            chatWindow.style.display = 'none';
        }, 300);
        this.isOpen = false;
    }
    
    sendMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        
        if (message) {
            this.addUserMessage(message);
            this.processQuery(message);
            input.value = '';
        }
    }
    
    addUserMessage(message) {
        const messagesContainer = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message user-message';
        messageDiv.innerHTML = `
            <div class="message-content">${message}</div>
            <div class="message-time">${this.getCurrentTime()}</div>
        `;
        messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }
    
    addAssistantMessage(message, isTyping = true) {
        const messagesContainer = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message assistant-message';
        
        if (isTyping) {
            messageDiv.innerHTML = `
                <div class="message-content typing">
                    <div class="typing-indicator">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            `;
            messagesContainer.appendChild(messageDiv);
            this.scrollToBottom();
            
            // Simulate typing delay
            setTimeout(() => {
                messageDiv.innerHTML = `
                    <div class="message-content">${message}</div>
                    <div class="message-time">${this.getCurrentTime()}</div>
                `;
                this.scrollToBottom();
            }, 1000 + Math.random() * 1000);
        } else {
            messageDiv.innerHTML = `
                <div class="message-content">${message}</div>
                <div class="message-time">${this.getCurrentTime()}</div>
            `;
            messagesContainer.appendChild(messageDiv);
            this.scrollToBottom();
        }
    }
    
    processQuery(query) {
        const normalizedQuery = query.toLowerCase();
        let response = "";
        
        // Command detection (starts with /)
        if (query.startsWith('/')) {
            response = this.handleCommand(query);
        }
        // Glossary mode queries
        else if (this.glossaryMode) {
            response = this.handleGlossaryQuery(query);
        }
        // Greeting detection
        else if (this.matchesKeywords(normalizedQuery, ['hola', 'hello', 'hi', 'buenos', 'buenas'])) {
            response = this.getRandomResponse('greeting');
        }
        // Help requests
        else if (this.matchesKeywords(normalizedQuery, ['ayuda', 'help', 'que puedes', 'como funciona'])) {
            response = this.getRandomResponse('help');
        }
        // Glossary search (detect technical terms)
        else if (this.detectTechnicalTerm(normalizedQuery)) {
            response = this.searchGlossaryTerm(normalizedQuery);
        }
        // Process-specific queries
        else if (this.matchesKeywords(normalizedQuery, ['captacion', 'fuentes', 'combeima', 'cay', 'chembe'])) {
            response = this.getProcessInfo('captacion');
        }
        else if (this.matchesKeywords(normalizedQuery, ['desarenador', 'arenas', 'pretratamiento'])) {
            response = this.getProcessInfo('desarenador');
        }
        else if (this.matchesKeywords(normalizedQuery, ['coagulacion', 'floculacion', 'sulfato', 'aluminio'])) {
            response = this.getProcessInfo('coagulacion');
        }
        else if (this.matchesKeywords(normalizedQuery, ['sedimentacion', 'colmena', 'paneles'])) {
            response = this.getProcessInfo('sedimentacion');
        }
        else if (this.matchesKeywords(normalizedQuery, ['filtracion', 'antracita', 'arena', 'grava'])) {
            response = this.getProcessInfo('filtracion');
        }
        else if (this.matchesKeywords(normalizedQuery, ['desinfeccion', 'cloro', 'microbiologico'])) {
            response = this.getProcessInfo('desinfeccion');
        }
        else if (this.matchesKeywords(normalizedQuery, ['almacenamiento', 'tanques', 'reserva'])) {
            response = this.getTanksInfo();
        }
        else if (this.matchesKeywords(normalizedQuery, ['distribucion', 'distritos', 'suscriptores'])) {
            response = this.getDistrictsInfo();
        }
        // Specific tank queries
        else if (this.matchesKeywords(normalizedQuery, ['tanque', 'capacidad', 'ubicacion'])) {
            response = this.searchTanks(normalizedQuery);
        }
        // District queries
        else if (this.matchesKeywords(normalizedQuery, ['distrito', 'dh1', 'dh2', 'dh3', 'dh4', 'dh5', 'dh6', 'dh7', 'dh8', 'dh9', 'dh10'])) {
            response = this.searchDistricts(normalizedQuery);
        }
        // Calculation queries
        else if (this.matchesKeywords(normalizedQuery, ['total', 'suma', 'cuanto', 'cuantos'])) {
            response = this.handleCalculations(normalizedQuery);
        }
        // Default response
        else {
            response = this.getRandomResponse('unknown');
        }
        
        this.addAssistantMessage(response);
    }
    
    getProcessInfo(processKey) {
        const process = this.knowledgeBase.processes[processKey];
        let info = `<strong>üíß ${process.name}</strong>\n\n`;
        info += `${process.description}\n\n`;
        
        if (process.sources) {
            info += `<strong>Fuentes:</strong>\n${process.sources.join('\n')}\n\n`;
        }
        if (process.chemical) {
            info += `<strong>Qu√≠mico:</strong> ${process.chemical}\n`;
        }
        if (process.efficiency) {
            info += `<strong>Eficiencia:</strong> ${process.efficiency}\n`;
        }
        if (process.time || process.retention) {
            info += `<strong>Tiempo:</strong> ${process.time || process.retention}\n`;
        }
        if (process.investment) {
            info += `<strong>Inversi√≥n:</strong> ${process.investment}\n`;
        }
        if (process.capacity) {
            info += `<strong>Capacidad:</strong> ${process.capacity}`;
        }
        
        return info;
    }
    
    getTanksInfo() {
        const totalCapacity = this.knowledgeBase.tanks.reduce((sum, tank) => sum + tank.capacity, 0);
        const largestTank = this.knowledgeBase.tanks.reduce((max, tank) => tank.capacity > max.capacity ? tank : max);
        
        let info = `<strong>üè™ Sistema de Almacenamiento IBAL</strong>\n\n`;
        info += `<strong>Tanques totales:</strong> ${this.knowledgeBase.tanks.length}\n`;
        info += `<strong>Capacidad total:</strong> ${totalCapacity.toLocaleString()} m¬≥\n`;
        info += `<strong>Tanque m√°s grande:</strong> ${largestTank.name} (${largestTank.capacity.toLocaleString()} m¬≥)\n\n`;
        info += `¬øTe interesa informaci√≥n espec√≠fica de alg√∫n tanque?`;
        
        return info;
    }
    
    getDistrictsInfo() {
        const totalSubscribers = this.knowledgeBase.districts.reduce((sum, district) => sum + district.subscribers, 0);
        const largestDistrict = this.knowledgeBase.districts.reduce((max, district) => district.subscribers > max.subscribers ? district : max);
        
        let info = `<strong>üèòÔ∏è Distritos Hidr√°ulicos IBAL</strong>\n\n`;
        info += `<strong>Total distritos:</strong> ${this.knowledgeBase.districts.length}\n`;
        info += `<strong>Suscriptores totales:</strong> ${totalSubscribers.toLocaleString()}\n`;
        info += `<strong>Distrito m√°s grande:</strong> ${largestDistrict.code} - ${largestDistrict.name} (${largestDistrict.subscribers.toLocaleString()} suscriptores)\n\n`;
        info += `¬øQuieres informaci√≥n espec√≠fica de alg√∫n distrito?`;
        
        return info;
    }
    
    searchTanks(query) {
        const matches = this.knowledgeBase.tanks.filter(tank => {
            return tank.name.toLowerCase().includes(query) || 
                   tank.location.toLowerCase().includes(query) ||
                   query.includes(tank.id.toString());
        });
        
        if (matches.length > 0) {
            let info = `<strong>üîç Tanques encontrados:</strong>\n\n`;
            matches.forEach(tank => {
                info += `<strong>${tank.name}</strong>\n`;
                info += `Capacidad: ${tank.capacity.toLocaleString()} m¬≥\n`;
                info += `Ubicaci√≥n: ${tank.location}\n\n`;
            });
            return info;
        }
        
        return "No encontr√© tanques con esa descripci√≥n. ¬øPodr√≠as ser m√°s espec√≠fico?";
    }
    
    searchDistricts(query) {
        const matches = this.knowledgeBase.districts.filter(district => {
            return district.code.toLowerCase().includes(query) || 
                   district.name.toLowerCase().includes(query);
        });
        
        if (matches.length > 0) {
            let info = `<strong>üîç Distritos encontrados:</strong>\n\n`;
            matches.forEach(district => {
                const percentage = ((district.subscribers / 179547) * 100).toFixed(1);
                info += `<strong>${district.code} - ${district.name}</strong>\n`;
                info += `Suscriptores: ${district.subscribers.toLocaleString()} (${percentage}%)\n\n`;
            });
            return info;
        }
        
        return "No encontr√© distritos con esa descripci√≥n. Los distritos van del DH1 al DH10.";
    }
    
    handleCalculations(query) {
        if (this.matchesKeywords(query, ['tanques', 'almacenamiento', 'capacidad'])) {
            const total = this.knowledgeBase.tanks.reduce((sum, tank) => sum + tank.capacity, 0);
            return `<strong>üìä Capacidad total de almacenamiento:</strong> ${total.toLocaleString()} m¬≥`;
        }
        
        if (this.matchesKeywords(query, ['suscriptores', 'usuarios', 'distritos'])) {
            const total = this.knowledgeBase.districts.reduce((sum, district) => sum + district.subscribers, 0);
            return `<strong>üìä Total de suscriptores:</strong> ${total.toLocaleString()}`;
        }
        
        if (this.matchesKeywords(query, ['procesos', 'etapas'])) {
            return `<strong>üìä Total de procesos principales:</strong> 8 etapas\n(Captaci√≥n, Desarenaci√≥n, Coagulaci√≥n, Sedimentaci√≥n, Filtraci√≥n, Desinfecci√≥n, Almacenamiento, Distribuci√≥n)`;
        }
        
        return "¬øQu√© te gustar√≠a calcular? Puedo sumar capacidades de tanques, suscriptores, o contar procesos.";
    }
    
    matchesKeywords(query, keywords) {
        return keywords.some(keyword => query.includes(keyword.toLowerCase()));
    }
    
    getRandomResponse(type) {
        const responses = this.knowledgeBase.responses[type];
        return responses[Math.floor(Math.random() * responses.length)];
    }
    
    getCurrentTime() {
        return new Date().toLocaleTimeString('es-CO', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }
    
    scrollToBottom() {
        const messagesContainer = document.getElementById('chatMessages');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Glossary Methods
    handleCommand(command) {
        const parts = command.toLowerCase().split(' ');
        const cmd = parts[0];
        const args = parts.slice(1).join(' ');
        
        switch (cmd) {
            case '/glosario':
                if (args) {
                    return this.searchGlossaryTerm(args);
                } else {
                    return this.showGlossaryMenu();
                }
            case '/categorias':
                return this.showGlossaryCategories();
            case '/salir':
                this.glossaryMode = false;
                return "üìö Has salido del modo glosario. ¬øEn qu√© m√°s puedo ayudarte?";
            case '/help':
            case '/ayuda':
                return this.getGlossaryHelp();
            default:
                return `‚ùì Comando no reconocido: ${cmd}\n\nComandos disponibles:\n‚Ä¢ /glosario [t√©rmino] - Buscar t√©rmino espec√≠fico\n‚Ä¢ /categorias - Ver categor√≠as disponibles\n‚Ä¢ /ayuda - Ayuda del glosario\n‚Ä¢ /salir - Salir del modo glosario`;
        }
    }
    
    handleGlossaryQuery(query) {
        if (query.toLowerCase() === 'salir' || query.toLowerCase() === 'exit') {
            this.glossaryMode = false;
            return "üìö Has salido del modo glosario. ¬øEn qu√© m√°s puedo ayudarte?";
        }
        
        return this.searchGlossaryTerm(query);
    }
    
    showGlossaryMenu() {
        this.glossaryMode = true;
        let menu = `<strong>üìö Glosario T√©cnico PTAP La Pola</strong>\n\n`;
        menu += `¬°Bienvenido al glosario t√©cnico! Aqu√≠ encontrar√°s definiciones especializadas sobre tratamiento de agua.\n\n`;
        menu += `<strong>üîç C√≥mo usar:</strong>\n`;
        menu += `‚Ä¢ Escribe cualquier t√©rmino t√©cnico\n`;
        menu += `‚Ä¢ Usa /glosario [t√©rmino] para buscar\n`;
        menu += `‚Ä¢ Escribe /categorias para ver temas\n`;
        menu += `‚Ä¢ Escribe "salir" para volver al modo normal\n\n`;
        menu += `<strong>üí° T√©rminos populares:</strong>\n`;
        menu += `‚Ä¢ Coagulaci√≥n\n‚Ä¢ Turbiedad\n‚Ä¢ Paneles colmena\n‚Ä¢ Cloro residual\n‚Ä¢ IRCA\n‚Ä¢ Macromedidor\n\n`;
        menu += `¬øQu√© t√©rmino te gustar√≠a consultar?`;
        
        return menu;
    }
    
    showGlossaryCategories() {
        if (typeof glossaryCategories === 'undefined') {
            return "üìö Categor√≠as del glosario:\n\n‚Ä¢ Captaci√≥n\n‚Ä¢ Pretratamiento\n‚Ä¢ Tratamiento Qu√≠mico\n‚Ä¢ Separaci√≥n F√≠sica\n‚Ä¢ Hidr√°ulica\n‚Ä¢ Calidad del Agua\n‚Ä¢ Distribuci√≥n\n‚Ä¢ Almacenamiento\n\n¬øQu√© categor√≠a te interesa?";
        }
        
        let categories = `<strong>üìÇ Categor√≠as del Glosario T√©cnico</strong>\n\n`;
        Object.entries(glossaryCategories).forEach(([key, category]) => {
            categories += `${category.icon} <strong>${key}</strong>\n${category.description}\n\n`;
        });
        categories += `Escribe el nombre de una categor√≠a o un t√©rmino espec√≠fico para obtener m√°s informaci√≥n.`;
        
        return categories;
    }
    
    searchGlossaryTerm(query) {
        // Load glossary if available
        if (typeof technicalGlossary === 'undefined') {
            return this.searchLocalGlossary(query);
        }
        
        const results = this.performGlossarySearch(query);
        
        if (results.length === 0) {
            return `‚ùì No encontr√© el t√©rmino "${query}" en el glosario.\n\nüí° Sugerencias:\n‚Ä¢ Verifica la ortograf√≠a\n‚Ä¢ Prueba con sin√≥nimos\n‚Ä¢ Usa /categorias para explorar temas\n‚Ä¢ Escribe t√©rminos como: turbiedad, coagulaci√≥n, pH, caudal`;
        }
        
        if (results.length === 1) {
            return this.formatGlossaryEntry(results[0]);
        }
        
        // Multiple results
        let response = `üîç Encontr√© ${results.length} t√©rminos relacionados con "${query}":\n\n`;
        results.slice(0, 3).forEach((term, index) => {
            response += `${index + 1}. <strong>${term.term}</strong> (${term.category})\n`;
            response += `${term.definition.substring(0, 100)}...\n\n`;
        });
        
        if (results.length > 3) {
            response += `... y ${results.length - 3} t√©rminos m√°s.\n\n`;
        }
        
        response += `üí° Escribe el nombre exacto del t√©rmino para ver la definici√≥n completa.`;
        return response;
    }
    
    searchLocalGlossary(query) {
        // Fallback local glossary when external file not loaded
        const localTerms = {
            "turbiedad": "Medida de la claridad del agua, expresada por la cantidad de part√≠culas suspendidas. En PTAP La Pola, valores >12,000 NTU activan suspensi√≥n autom√°tica.",
            "coagulacion": "Proceso de desestabilizaci√≥n de part√≠culas coloidales mediante sulfato de aluminio (15-40 mg/L) en PTAP La Pola.",
            "ph": "Medida de acidez o alcalinidad del agua. Rango √≥ptimo 6.5-8.5 en agua cruda, 6.5-8.0 en agua tratada.",
            "caudal": "Volumen de agua que pasa por una secci√≥n en la unidad de tiempo. PTAP La Pola maneja 2,170 L/s de capacidad total.",
            "cloro residual": "Cantidad de cloro libre disponible despu√©s de la desinfecci√≥n. PTAP La Pola mantiene 0.3-0.8 mg/L en red.",
            "irca": "√çndice de Riesgo de la Calidad del Agua. PTAP La Pola mantiene IRCA declarado de 0.0% (sin riesgo).",
            "macromedidor": "Equipo de medici√≥n de caudal de gran di√°metro. PTAP La Pola tiene 6 macromedidores en captaciones y entradas."
        };
        
        const normalizedQuery = query.toLowerCase();
        
        if (localTerms[normalizedQuery]) {
            return `<strong>üìñ ${normalizedQuery.charAt(0).toUpperCase() + normalizedQuery.slice(1)}</strong>\n\n${localTerms[normalizedQuery]}\n\nüí° Para acceso completo al glosario, aseg√∫rate de que todos los scripts est√©n cargados.`;
        }
        
        // Search in partial matches
        const matches = Object.keys(localTerms).filter(term => 
            term.includes(normalizedQuery) || normalizedQuery.includes(term)
        );
        
        if (matches.length > 0) {
            let response = `üîç T√©rminos relacionados encontrados:\n\n`;
            matches.forEach(match => {
                response += `<strong>${match.charAt(0).toUpperCase() + match.slice(1)}</strong>\n${localTerms[match]}\n\n`;
            });
            return response;
        }
        
        return `‚ùì No encontr√© el t√©rmino "${query}" en el glosario b√°sico.\n\nüí° T√©rminos disponibles: turbiedad, coagulaci√≥n, pH, caudal, cloro residual, IRCA, macromedidor`;
    }
    
    performGlossarySearch(query) {
        if (typeof searchGlossary === 'function') {
            return searchGlossary(query);
        }
        
        // Fallback search
        const normalizedQuery = query.toLowerCase();
        const results = [];
        
        Object.values(technicalGlossary).forEach(entry => {
            if (entry.term.toLowerCase().includes(normalizedQuery) ||
                entry.definition.toLowerCase().includes(normalizedQuery) ||
                (entry.synonyms && entry.synonyms.some(synonym => 
                    synonym.toLowerCase().includes(normalizedQuery)))) {
                results.push(entry);
            }
        });
        
        return results;
    }
    
    formatGlossaryEntry(entry) {
        let formatted = `<strong>üìñ ${entry.term}</strong>\n`;
        formatted += `<em>${entry.category}</em>\n\n`;
        formatted += `<strong>Definici√≥n:</strong>\n${entry.definition}\n\n`;
        
        if (entry.application) {
            formatted += `<strong>üè≠ Aplicaci√≥n en PTAP La Pola:</strong>\n${entry.application}\n\n`;
        }
        
        if (entry.units) {
            formatted += `<strong>üìè Unidades:</strong> ${entry.units}\n\n`;
        }
        
        if (entry.synonyms && entry.synonyms.length > 0) {
            formatted += `<strong>üîÑ Sin√≥nimos:</strong> ${entry.synonyms.join(', ')}\n\n`;
        }
        
        if (entry.relatedTerms && entry.relatedTerms.length > 0) {
            formatted += `<strong>üîó T√©rminos relacionados:</strong> ${entry.relatedTerms.join(', ')}\n\n`;
        }
        
        formatted += `üí° Usa /glosario [t√©rmino relacionado] para m√°s informaci√≥n`;
        
        return formatted;
    }
    
    detectTechnicalTerm(query) {
        const technicalKeywords = [
            'turbiedad', 'ph', 'caudal', 'coagulacion', 'floculacion', 'sedimentacion',
            'filtracion', 'desinfeccion', 'cloro', 'aluminio', 'bocatoma', 'macromedidor',
            'irca', 'coliformes', 'alcalinidad', 'antracita', 'retrolavado', 'distrito',
            'tanque', 'capacidad', 'ntu', 'mg/l', 'ppm', 'tiempo de retencion'
        ];
        
        return technicalKeywords.some(keyword => 
            query.toLowerCase().includes(keyword)
        );
    }
    
    getGlossaryHelp() {
        return `<strong>üìö Ayuda del Glosario T√©cnico</strong>\n\n<strong>Comandos disponibles:</strong>\n‚Ä¢ /glosario [t√©rmino] - Buscar t√©rmino espec√≠fico\n‚Ä¢ /categorias - Ver todas las categor√≠as\n‚Ä¢ /ayuda - Mostrar esta ayuda\n‚Ä¢ /salir - Salir del modo glosario\n\n<strong>B√∫squeda inteligente:</strong>\n‚Ä¢ Busca por t√©rmino exacto\n‚Ä¢ Busca por sin√≥nimos\n‚Ä¢ Busca en definiciones\n‚Ä¢ Busca por categor√≠a\n\n<strong>Ejemplos:</strong>\n‚Ä¢ /glosario turbiedad\n‚Ä¢ /glosario pH\n‚Ä¢ /glosario cloro residual\n‚Ä¢ coagulaci√≥n\n‚Ä¢ paneles colmena\n\n<strong>Categor√≠as disponibles:</strong>\nCaptaci√≥n, Pretratamiento, Tratamiento Qu√≠mico, Separaci√≥n F√≠sica, Hidr√°ulica, Calidad del Agua, Distribuci√≥n, Almacenamiento`;
    }
}

// Initialize assistant when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.virtualAssistant = new VirtualAssistant();
});

// Make globally available
window.VirtualAssistant = VirtualAssistant;